  config.vm.define :%{custom_hostname} do |%{custom_hostname}|
    
    # name it
    %{custom_hostname}.vm.box = "%{BOX}"

    %{custom_hostname}.vm.provider "vmware_fusion" do |v|
      v.box = "precise64"
      v.vmx["memsize"]  = "4096"
    end
    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    %{custom_hostname}.vm.provider :virtualbox do |vb|
   
      # Don't boot with headless mode
      vb.gui = true
   
      # Use VBoxManage to customize the VM. For example to change memory:
      vb.customize ["modifyvm", :id, "--memory", "%{VB_RAM}", "--cpus", "%{VB_CORES}", "--nictype1", "Am79C970A", "--vram", "32", "--natdnshostresolver1", "on"]
  
    end
 
    # from https://github.com/mitchellh/vagrant-aws
    %{custom_hostname}.vm.provider :aws do |aws, override|
  
      aws.tags = {
        'Name' => "%{custom_hostname}" 
      }
      aws.access_key_id = "%{AWS_KEY}"
      aws.secret_access_key = "%{AWS_SECRET_KEY}"
      # requires patching for AWS spot instances
      #aws.spot_instance = true
      #aws.spot_max_price = 0.681
      aws.keypair_name = "%{AWS_SSH_KEY_NAME}"
      aws.user_data = File.read("user_data.txt")
      aws.region = "%{AWS_REGION}"
      aws.availability_zone = %{AWS_ZONE}
      aws.ami = "%{AWS_IMAGE}"
      aws.instance_type = "%{AWS_INSTANCE_TYPE}"
      aws.instance_ready_timeout = 6000
      %{AWS_EBS_VOLS}
      override.ssh.username = "%{AWS_SSH_USERNAME}"
      override.ssh.private_key_path = "%{AWS_SSH_PEM_FILE}"
    end

    %{custom_hostname}.vm.provider :openstack do |os, override| # e.g. BioNimbus' Sullivan cluster
      os.username = "%{OS_USER}"
      os.api_key  = "%{OS_API_KEY}"
      os.flavor   = "%{OS_INSTANCE_TYPE}"
      os.image    = "%{OS_IMAGE}"
      os.endpoint = "%{OS_ENDPOINT}"
      os.keypair_name = "%{OS_SSH_KEY_NAME}"
      os.ssh_username = "%{OS_SSH_USERNAME}"
      os.tenant = "%{OS_TENANT}"
      # TODO: this is hardcoded!
      override.ssh.username = "%{OS_SSH_USERNAME}"
      override.ssh.private_key_path = "%{OS_SSH_PEM_FILE}"
      os.network = "%{OS_NETWORK}"
      os.networks = [ "%{OS_NETWORK}" ]   
      os.floating_ip = "%{OS_FLOATING_IP}"
      os.server_name = "%{custom_hostname}"
      os.user_data = "#cloud-config\nmanage_etc_hosts: True"
    end
    
    %{custom_hostname}.vm.provider :vcloud do |vcloud, override|
      vcloud.hostname = "%{VCLOUD_HOSTNAME}"
      vcloud.username = "%{VCLOUD_USERNAME}"
      vcloud.password = "%{VCLOUD_PASSWORD}"

      vcloud.org_name = "%{VCLOUD_ORG_NAME}"
      vcloud.vdc_name = "%{VCLOUD_VDC_NAME}"

      vcloud.catalog_name = "%{VCLOUD_CATALOG_NAME}"
      #vcloud.ip_subnet = "%{VCLOUD_IP_SUBNET}"
      vcloud.vdc_network_name = "%{VCLOUD_VDC_NETWORK_NAME}"

#      vcloud.vdc_edge_gateway = "%{VCLOUD_VDC_EDGE_GATEWAY}"
#      vcloud.vdc_edge_gateway_ip = "%{VCLOUD_VDC_EDGE_GATEWAY_IP}"
       vcloud.network_bridge=true
       override.ssh.private_key_path = "%{VCLOUD_SSH_PEM_FILE}"
    end

    %{custom_hostname}.vm.network :forwarded_port, host: 8081, guest: 80
    %{custom_hostname}.vm.network :forwarded_port, host: 8080, guest: 8080
    %{custom_hostname}.vm.network :forwarded_port, host: 8888, guest: 8888
    %{custom_hostname}.vm.network :forwarded_port, host: 11000, guest: 11000
    %{custom_hostname}.vm.network :forwarded_port, host: 50030, guest: 50030
    %{custom_hostname}.vm.network :forwarded_port, host: 50070, guest: 50070
    %{custom_hostname}.vm.network :forwarded_port, host: 60010, guest: 60010
    %{custom_hostname}.vm.network :forwarded_port, host: 60030, guest: 60030
    %{custom_hostname}.vm.network :forwarded_port, host: 5432, guest: 5432
  end
